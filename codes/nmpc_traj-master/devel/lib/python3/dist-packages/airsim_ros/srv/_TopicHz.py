# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from airsim_ros/TopicHzRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TopicHzRequest(genpy.Message):
  _md5sum = "1a514c24c167567fafb0a99dffb52d0a"
  _type = "airsim_ros/TopicHzRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 get
"""
  __slots__ = ['get']
  _slot_types = ['int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       get

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TopicHzRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.get is None:
        self.get = 0
    else:
      self.get = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.get
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.get,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.get
      buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 8
      (self.get,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from airsim_ros/TopicHzResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TopicHzResponse(genpy.Message):
  _md5sum = "9cbf4860726dd4f0468dbc6bcf0a1d2e"
  _type = "airsim_ros/TopicHzResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 vel_cmd_hz
float64 pose_cmd_hz
float64 angle_cmd_hz
float64 imu_hz
float64 image_hz
float64 pose_err_hz
float64 rotor_pwm_hz
"""
  __slots__ = ['vel_cmd_hz','pose_cmd_hz','angle_cmd_hz','imu_hz','image_hz','pose_err_hz','rotor_pwm_hz']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vel_cmd_hz,pose_cmd_hz,angle_cmd_hz,imu_hz,image_hz,pose_err_hz,rotor_pwm_hz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TopicHzResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vel_cmd_hz is None:
        self.vel_cmd_hz = 0.
      if self.pose_cmd_hz is None:
        self.pose_cmd_hz = 0.
      if self.angle_cmd_hz is None:
        self.angle_cmd_hz = 0.
      if self.imu_hz is None:
        self.imu_hz = 0.
      if self.image_hz is None:
        self.image_hz = 0.
      if self.pose_err_hz is None:
        self.pose_err_hz = 0.
      if self.rotor_pwm_hz is None:
        self.rotor_pwm_hz = 0.
    else:
      self.vel_cmd_hz = 0.
      self.pose_cmd_hz = 0.
      self.angle_cmd_hz = 0.
      self.imu_hz = 0.
      self.image_hz = 0.
      self.pose_err_hz = 0.
      self.rotor_pwm_hz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.vel_cmd_hz, _x.pose_cmd_hz, _x.angle_cmd_hz, _x.imu_hz, _x.image_hz, _x.pose_err_hz, _x.rotor_pwm_hz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.vel_cmd_hz, _x.pose_cmd_hz, _x.angle_cmd_hz, _x.imu_hz, _x.image_hz, _x.pose_err_hz, _x.rotor_pwm_hz,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.vel_cmd_hz, _x.pose_cmd_hz, _x.angle_cmd_hz, _x.imu_hz, _x.image_hz, _x.pose_err_hz, _x.rotor_pwm_hz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.vel_cmd_hz, _x.pose_cmd_hz, _x.angle_cmd_hz, _x.imu_hz, _x.image_hz, _x.pose_err_hz, _x.rotor_pwm_hz,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
class TopicHz(object):
  _type          = 'airsim_ros/TopicHz'
  _md5sum = '685d1f21c0a32ce2836c18711bcaeaff'
  _request_class  = TopicHzRequest
  _response_class = TopicHzResponse
