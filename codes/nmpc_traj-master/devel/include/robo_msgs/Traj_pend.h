// Generated by gencpp from file robo_msgs/Traj_pend.msg
// DO NOT EDIT!


#ifndef ROBO_MSGS_MESSAGE_TRAJ_PEND_H
#define ROBO_MSGS_MESSAGE_TRAJ_PEND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace robo_msgs
{
template <class ContainerAllocator>
struct Traj_pend_
{
  typedef Traj_pend_<ContainerAllocator> Type;

  Traj_pend_()
    : header()
    , traj_id(0)
    , pos()
    , yaw()
    , time()  {
    }
  Traj_pend_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , traj_id(0)
    , pos(_alloc)
    , yaw(_alloc)
    , time(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _traj_id_type;
  _traj_id_type traj_id;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _pos_type;
  _pos_type pos;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _yaw_type;
  _yaw_type yaw;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::robo_msgs::Traj_pend_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robo_msgs::Traj_pend_<ContainerAllocator> const> ConstPtr;

}; // struct Traj_pend_

typedef ::robo_msgs::Traj_pend_<std::allocator<void> > Traj_pend;

typedef boost::shared_ptr< ::robo_msgs::Traj_pend > Traj_pendPtr;
typedef boost::shared_ptr< ::robo_msgs::Traj_pend const> Traj_pendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robo_msgs::Traj_pend_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robo_msgs::Traj_pend_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robo_msgs::Traj_pend_<ContainerAllocator1> & lhs, const ::robo_msgs::Traj_pend_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.traj_id == rhs.traj_id &&
    lhs.pos == rhs.pos &&
    lhs.yaw == rhs.yaw &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robo_msgs::Traj_pend_<ContainerAllocator1> & lhs, const ::robo_msgs::Traj_pend_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robo_msgs::Traj_pend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robo_msgs::Traj_pend_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robo_msgs::Traj_pend_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robo_msgs::Traj_pend_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robo_msgs::Traj_pend_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robo_msgs::Traj_pend_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robo_msgs::Traj_pend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac1e32defbaa93c0b56eb1120a69285a";
  }

  static const char* value(const ::robo_msgs::Traj_pend_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac1e32defbaa93c0ULL;
  static const uint64_t static_value2 = 0xb56eb1120a69285aULL;
};

template<class ContainerAllocator>
struct DataType< ::robo_msgs::Traj_pend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robo_msgs/Traj_pend";
  }

  static const char* value(const ::robo_msgs::Traj_pend_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robo_msgs::Traj_pend_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# 轨迹的id，用来标记不同轨迹\n"
"uint32 traj_id\n"
"\n"
"geometry_msgs/Point[] pos # 轨迹位置点\n"
"float64[] yaw # 位置点对应的偏航角\n"
"float64[] time # 位置点对应的时间\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robo_msgs::Traj_pend_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robo_msgs::Traj_pend_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.traj_id);
      stream.next(m.pos);
      stream.next(m.yaw);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Traj_pend_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robo_msgs::Traj_pend_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robo_msgs::Traj_pend_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "traj_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.traj_id);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pos[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "time[]" << std::endl;
    for (size_t i = 0; i < v.time.size(); ++i)
    {
      s << indent << "  time[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.time[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBO_MSGS_MESSAGE_TRAJ_PEND_H
