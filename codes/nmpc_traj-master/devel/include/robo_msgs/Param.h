// Generated by gencpp from file robo_msgs/Param.msg
// DO NOT EDIT!


#ifndef ROBO_MSGS_MESSAGE_PARAM_H
#define ROBO_MSGS_MESSAGE_PARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robo_msgs
{
template <class ContainerAllocator>
struct Param_
{
  typedef Param_<ContainerAllocator> Type;

  Param_()
    : header()
    , param_y()
    , param_z()
    , t_next(0.0)  {
    }
  Param_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , param_y(_alloc)
    , param_z(_alloc)
    , t_next(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _param_y_type;
  _param_y_type param_y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _param_z_type;
  _param_z_type param_z;

   typedef double _t_next_type;
  _t_next_type t_next;





  typedef boost::shared_ptr< ::robo_msgs::Param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robo_msgs::Param_<ContainerAllocator> const> ConstPtr;

}; // struct Param_

typedef ::robo_msgs::Param_<std::allocator<void> > Param;

typedef boost::shared_ptr< ::robo_msgs::Param > ParamPtr;
typedef boost::shared_ptr< ::robo_msgs::Param const> ParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robo_msgs::Param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robo_msgs::Param_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robo_msgs::Param_<ContainerAllocator1> & lhs, const ::robo_msgs::Param_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.param_y == rhs.param_y &&
    lhs.param_z == rhs.param_z &&
    lhs.t_next == rhs.t_next;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robo_msgs::Param_<ContainerAllocator1> & lhs, const ::robo_msgs::Param_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robo_msgs::Param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robo_msgs::Param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robo_msgs::Param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robo_msgs::Param_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robo_msgs::Param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robo_msgs::Param_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robo_msgs::Param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9d15ed2b648eaa21ef0207f8919cba2";
  }

  static const char* value(const ::robo_msgs::Param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9d15ed2b648eaa2ULL;
  static const uint64_t static_value2 = 0x1ef0207f8919cba2ULL;
};

template<class ContainerAllocator>
struct DataType< ::robo_msgs::Param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robo_msgs/Param";
  }

  static const char* value(const ::robo_msgs::Param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robo_msgs::Param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64[] param_y\n"
"float64[] param_z\n"
"float64 t_next\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robo_msgs::Param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robo_msgs::Param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.param_y);
      stream.next(m.param_z);
      stream.next(m.t_next);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robo_msgs::Param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robo_msgs::Param_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "param_y[]" << std::endl;
    for (size_t i = 0; i < v.param_y.size(); ++i)
    {
      s << indent << "  param_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.param_y[i]);
    }
    s << indent << "param_z[]" << std::endl;
    for (size_t i = 0; i < v.param_z.size(); ++i)
    {
      s << indent << "  param_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.param_z[i]);
    }
    s << indent << "t_next: ";
    Printer<double>::stream(s, indent + "  ", v.t_next);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBO_MSGS_MESSAGE_PARAM_H
