// Generated by gencpp from file airsim_ros/AngleRateThrottle.msg
// DO NOT EDIT!


#ifndef AIRSIM_ROS_MESSAGE_ANGLERATETHROTTLE_H
#define AIRSIM_ROS_MESSAGE_ANGLERATETHROTTLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace airsim_ros
{
template <class ContainerAllocator>
struct AngleRateThrottle_
{
  typedef AngleRateThrottle_<ContainerAllocator> Type;

  AngleRateThrottle_()
    : rollRate(0.0)
    , pitchRate(0.0)
    , yawRate(0.0)
    , throttle(0.0)  {
    }
  AngleRateThrottle_(const ContainerAllocator& _alloc)
    : rollRate(0.0)
    , pitchRate(0.0)
    , yawRate(0.0)
    , throttle(0.0)  {
  (void)_alloc;
    }



   typedef double _rollRate_type;
  _rollRate_type rollRate;

   typedef double _pitchRate_type;
  _pitchRate_type pitchRate;

   typedef double _yawRate_type;
  _yawRate_type yawRate;

   typedef double _throttle_type;
  _throttle_type throttle;





  typedef boost::shared_ptr< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> const> ConstPtr;

}; // struct AngleRateThrottle_

typedef ::airsim_ros::AngleRateThrottle_<std::allocator<void> > AngleRateThrottle;

typedef boost::shared_ptr< ::airsim_ros::AngleRateThrottle > AngleRateThrottlePtr;
typedef boost::shared_ptr< ::airsim_ros::AngleRateThrottle const> AngleRateThrottleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_ros::AngleRateThrottle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_ros::AngleRateThrottle_<ContainerAllocator1> & lhs, const ::airsim_ros::AngleRateThrottle_<ContainerAllocator2> & rhs)
{
  return lhs.rollRate == rhs.rollRate &&
    lhs.pitchRate == rhs.pitchRate &&
    lhs.yawRate == rhs.yawRate &&
    lhs.throttle == rhs.throttle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_ros::AngleRateThrottle_<ContainerAllocator1> & lhs, const ::airsim_ros::AngleRateThrottle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93bb283398a326cfc4d5e3c6a992ff87";
  }

  static const char* value(const ::airsim_ros::AngleRateThrottle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93bb283398a326cfULL;
  static const uint64_t static_value2 = 0xc4d5e3c6a992ff87ULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_ros/AngleRateThrottle";
  }

  static const char* value(const ::airsim_ros::AngleRateThrottle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 rollRate\n"
"float64 pitchRate\n"
"float64 yawRate\n"
"float64 throttle\n"
;
  }

  static const char* value(const ::airsim_ros::AngleRateThrottle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rollRate);
      stream.next(m.pitchRate);
      stream.next(m.yawRate);
      stream.next(m.throttle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AngleRateThrottle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_ros::AngleRateThrottle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_ros::AngleRateThrottle_<ContainerAllocator>& v)
  {
    s << indent << "rollRate: ";
    Printer<double>::stream(s, indent + "  ", v.rollRate);
    s << indent << "pitchRate: ";
    Printer<double>::stream(s, indent + "  ", v.pitchRate);
    s << indent << "yawRate: ";
    Printer<double>::stream(s, indent + "  ", v.yawRate);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_ROS_MESSAGE_ANGLERATETHROTTLE_H
