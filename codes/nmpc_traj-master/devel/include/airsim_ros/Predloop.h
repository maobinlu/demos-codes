// Generated by gencpp from file airsim_ros/Predloop.msg
// DO NOT EDIT!


#ifndef AIRSIM_ROS_MESSAGE_PREDLOOP_H
#define AIRSIM_ROS_MESSAGE_PREDLOOP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <std_msgs/Bool.h>

namespace airsim_ros
{
template <class ContainerAllocator>
struct Predloop_
{
  typedef Predloop_<ContainerAllocator> Type;

  Predloop_()
    : position()
    , loop_flag()  {
    }
  Predloop_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , loop_flag(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _loop_flag_type;
  _loop_flag_type loop_flag;





  typedef boost::shared_ptr< ::airsim_ros::Predloop_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::airsim_ros::Predloop_<ContainerAllocator> const> ConstPtr;

}; // struct Predloop_

typedef ::airsim_ros::Predloop_<std::allocator<void> > Predloop;

typedef boost::shared_ptr< ::airsim_ros::Predloop > PredloopPtr;
typedef boost::shared_ptr< ::airsim_ros::Predloop const> PredloopConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::airsim_ros::Predloop_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::airsim_ros::Predloop_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::airsim_ros::Predloop_<ContainerAllocator1> & lhs, const ::airsim_ros::Predloop_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.loop_flag == rhs.loop_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::airsim_ros::Predloop_<ContainerAllocator1> & lhs, const ::airsim_ros::Predloop_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace airsim_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::airsim_ros::Predloop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::airsim_ros::Predloop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros::Predloop_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::airsim_ros::Predloop_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros::Predloop_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::airsim_ros::Predloop_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::airsim_ros::Predloop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8511114e157c218c8b9df16423dc9a97";
  }

  static const char* value(const ::airsim_ros::Predloop_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8511114e157c218cULL;
  static const uint64_t static_value2 = 0x8b9df16423dc9a97ULL;
};

template<class ContainerAllocator>
struct DataType< ::airsim_ros::Predloop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "airsim_ros/Predloop";
  }

  static const char* value(const ::airsim_ros::Predloop_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::airsim_ros::Predloop_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose position\n"
"std_msgs/Bool loop_flag\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::airsim_ros::Predloop_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::airsim_ros::Predloop_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.loop_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Predloop_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::airsim_ros::Predloop_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::airsim_ros::Predloop_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "loop_flag: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.loop_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AIRSIM_ROS_MESSAGE_PREDLOOP_H
