// Generated by gencpp from file fast_fly_waypoint/TrackTraj.msg
// DO NOT EDIT!


#ifndef FAST_FLY_WAYPOINT_MESSAGE_TRACKTRAJ_H
#define FAST_FLY_WAYPOINT_MESSAGE_TRACKTRAJ_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>

namespace fast_fly_waypoint
{
template <class ContainerAllocator>
struct TrackTraj_
{
  typedef TrackTraj_<ContainerAllocator> Type;

  TrackTraj_()
    : drone_id(0)
    , start_time()
    , dt()
    , position()
    , velocity()
    , orientation()
    , angular()  {
    }
  TrackTraj_(const ContainerAllocator& _alloc)
    : drone_id(0)
    , start_time()
    , dt(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , orientation(_alloc)
    , angular(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _drone_id_type;
  _drone_id_type drone_id;

   typedef ros::Time _start_time_type;
  _start_time_type start_time;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _dt_type;
  _dt_type dt;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _velocity_type;
  _velocity_type velocity;

   typedef std::vector< ::geometry_msgs::Quaternion_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Quaternion_<ContainerAllocator> >> _orientation_type;
  _orientation_type orientation;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _angular_type;
  _angular_type angular;





  typedef boost::shared_ptr< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> const> ConstPtr;

}; // struct TrackTraj_

typedef ::fast_fly_waypoint::TrackTraj_<std::allocator<void> > TrackTraj;

typedef boost::shared_ptr< ::fast_fly_waypoint::TrackTraj > TrackTrajPtr;
typedef boost::shared_ptr< ::fast_fly_waypoint::TrackTraj const> TrackTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator1> & lhs, const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator2> & rhs)
{
  return lhs.drone_id == rhs.drone_id &&
    lhs.start_time == rhs.start_time &&
    lhs.dt == rhs.dt &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.orientation == rhs.orientation &&
    lhs.angular == rhs.angular;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator1> & lhs, const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fast_fly_waypoint

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4fa02baf9e303d78b3ed2aba372959e";
  }

  static const char* value(const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4fa02baf9e303d7ULL;
  static const uint64_t static_value2 = 0x8b3ed2aba372959eULL;
};

template<class ContainerAllocator>
struct DataType< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fast_fly_waypoint/TrackTraj";
  }

  static const char* value(const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 drone_id\n"
"time start_time\n"
"\n"
"float64[] dt\n"
"geometry_msgs/Point[] position\n"
"geometry_msgs/Vector3[] velocity\n"
"geometry_msgs/Quaternion[] orientation\n"
"geometry_msgs/Vector3[] angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drone_id);
      stream.next(m.start_time);
      stream.next(m.dt);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.orientation);
      stream.next(m.angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fast_fly_waypoint::TrackTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fast_fly_waypoint::TrackTraj_<ContainerAllocator>& v)
  {
    s << indent << "drone_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.drone_id);
    s << indent << "start_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.start_time);
    s << indent << "dt[]" << std::endl;
    for (size_t i = 0; i < v.dt.size(); ++i)
    {
      s << indent << "  dt[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dt[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.velocity[i]);
    }
    s << indent << "orientation[]" << std::endl;
    for (size_t i = 0; i < v.orientation.size(); ++i)
    {
      s << indent << "  orientation[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "    ", v.orientation[i]);
    }
    s << indent << "angular[]" << std::endl;
    for (size_t i = 0; i < v.angular.size(); ++i)
    {
      s << indent << "  angular[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.angular[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAST_FLY_WAYPOINT_MESSAGE_TRACKTRAJ_H
